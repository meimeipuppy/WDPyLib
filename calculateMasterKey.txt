 P_hash(secret, seed) = HMAC_hash(secret, A(1) + seed) +
                              HMAC_hash(secret, A(2) + seed) +
                              HMAC_hash(secret, A(3) + seed) + ...

   Where + indicates concatenation.

   A() is defined as:
       A(0) = seed
       A(i) = HMAC_hash(secret, A(i-1))


What is PRF:
PRF(secret, label, seed) = P_MD5(S1, label + seed) XOR
                                  P_SHA-1(S2, label + seed);

The label is an ASCII string. It should be included in the exact form
   it is given without a length byte or trailing null character.  For
   example, the label "slithy toves" would be processed by hashing the
   following bytes:

       73 6C 69 74 68 79 20 74 6F 76 65 73

Note that because MD5 produces 16 byte outputs and SHA-1 produces 20
   byte outputs, the boundaries of their internal iterations will not be
   aligned; to generate a 80 byte output will involve P_MD5 being
   iterated through A(5), while P_SHA-1 will only iterate through A(4).


master_secret = PRF(pre_master_secret, "master secret",
                           ClientHello.random + ServerHello.random)
       [0..47];

 TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA  RSA_PSK       3DES_EDE_CBC  SHA

The master secret is always exactly 48 bytes in length. The length of
   the premaster secret will vary depending on key exchange method.

To generate the key material, compute

       key_block = PRF(SecurityParameters.master_secret,
                          "key expansion",
                          SecurityParameters.server_random +
                          SecurityParameters.client_random);

   until enough output has been generated. Then the key_block is
   partitioned as follows:

       client_write_MAC_secret[SecurityParameters.hash_size]
       server_write_MAC_secret[SecurityParameters.hash_size]
       client_write_key[SecurityParameters.key_material_length]
       server_write_key[SecurityParameters.key_material_length]
       client_write_IV[SecurityParameters.IV_size]
       server_write_IV[SecurityParameters.IV_size]



PSK: Pre-shared Key RFC 4279
\

 The premaster secret is formed as follows: if the PSK is N octets
   long, concatenate a uint16 with the value N, N zero octets, a second
   uint16 with the value N, and the PSK itself.



psk = 0123456789ABCDEFFEDCBA9876543210
n= 16
so premaster secret = 00100000000000000000000000000000000000100123456789ABCDEFFEDCBA9876543210
0x12+0x12 = 0x24 bytes

master_secret = PRF(pre_master_secret, "master secret",
                           ClientHello.random + ServerHello.random)
= P_MD5(pre_master_secret1, "master secret" + ClientHello.random + ServerHello.random)
	XOR
  P_SHA-1pre_master_secret2, "master secret" + ClientHello.random + ServerHello.random);

= P_MD5(4) XOR P_SHA-1(4)

make "master secret" + ClientHello.random + ServerHello.random = md5seed
pre_master_secret1 = md5secret

P_MD5(4) = HMAC_MD5((md5secret, A(1)+seed )
	+ HMAC_MD5((md5secret, A(2)+seed )
	+ HMAC_MD5((md5secret, A(3)+seed )
	+ HMAC_MD5((md5secret, A(4)+seed )
A(1)= HMAC_MD5(md5secret, A(0))
A(2)= HMAC_MD5(md5secret, A(1))


lets say clientHello.random = 9B660E0BA9F8E6FBA9E815AF7DA58C9F1943BAE1768B6210AB14992B74961335 32-byte
serverHello.random = 8D576D4E7E4BA72EBCF3D2C4739FAD683C10EEC5C76AA93A816020ABBC132204 32-byte
